//VGA & mouse
@0x00	0x00	load the mem to reg A
@0x01	0x01	addr of mem
@0x02	0x01	load the mem to reg B
@0x03	0x03	addr of mem
@0x04	0xB6	jump to somewhere if reg A is smaller than reg B
@0x05	0x0C	addr to jump to
@0x06	0x00	load the mem to reg A
@0x07	0x04	addr of mem
@0x08	0x02	write the reg A to the mem
@0x09	0x01	addr of mem
@0x0A	0x07	after draw the background draw the mouse
@0x0B	0x5F	draw the mouse
@0x0C	0x00	load the mem to reg A
@0x0D	0x00	addr of mem
@0x0E	0x01	load the mem to reg B
@0x0F	0x02	addr of mem
@0x10	0xB6	jump to somewhere if reg A is smaller than reg B
@0x11	0x1D	addr to jump to
@0x12	0x00	load the mem to reg A
@0x13	0x04	addr of mem
@0x14	0x02	wirte the reg A to the mem
@0x15	0x00	addr of mem
@0x16	0x00	load the mem to reg A
@0x17	0x01	addr of mem
@0x18	0x54	reg add 1 and save in the reg A
@0x19	0x02	wirte the reg A to the mem
@0x1A	0x01	addr of mem
@0x1B	0x07	go to next instruction
@0x1C	0x00	addr of mem
		
@0x1D	0x00	load the mem to reg A
@0x1E	0x00	addr of mem
@0x1F	0x01	load the mem to reg B
@0x20	0x09	addr of mem
@0x21	0xD6	test if the H counter in range then jump to 
@0x22	0x2B	
@0x23	0x07	then H is in range 3 or 1, go to
@0x24	0x25	
@0x25	0x00	load the mem to reg A
@0x26	0x04	addr of mem
@0x27	0x02	wirte the reg A to the mem
@0x28	0x06	addr of mem
@0x29	0x07	go to instruction
@0x2A	0x31	
@0x2B	0x00	load the mem to reg A
@0x2C	0x0E	addr of mem
@0x2D	0x02	wirte the reg A to the mem
@0x2E	0x06	addr of mem
@0x2F	0x07	go to instruction
@0x30	0x31	
		
@0x31	0x00	load the mem to reg A
@0x32	0x01	addr of mem
@0x33	0x01	load the mem to reg B
@0x34	0x0C	addr of mem
@0x35	0xC6	test if the V counter in range then jump to 
@0x36	0x3F	
@0x37	0x07	then H is in range 3 or 1, go to
@0x38	0x39	
@0x39	0x00	load the mem to reg A
@0x3A	0x04	addr of mem
@0x3B	0x02	wirte the reg A to the mem
@0x3C	0x07	addr of mem
@0x3D	0x07	go to instruction
@0x3E	0x45	
@0x3F	0x00	load the mem to reg A
@0x40	0x0E	addr of mem
@0x41	0x02	wirte the reg A to the mem
@0x42	0x07	addr of mem
@0x43	0x07	go to instruction
@0x44	0x45	
@0x45	0x00	load the mem to reg A
@0x46	0x06	addr of mem
@0x47	0x01	load the mem to reg B
@0x48	0x07	addr of mem
@0x49	0x94	pixel logic save output in A
@0x4A	0x02	wirte the reg A to the mem
@0x4B	0x05	addr of mem
@0x4C	0x00	load the mem to reg A
@0x4D	0x00	addr of mem
@0x4E	0x02	wirte the reg A to the mem
@0x4F	0xB0	put the data on buss
@0x50	0x00	load the mem to reg A
@0x51	0x01	addr of mem
@0x52	0x02	wirte the reg A to the mem
@0x53	0xB1	put the data on buss
@0x54	0x00	load the mem to reg A
@0x55	0x05	addr of mem
@0x56	0x02	wirte the reg A to the mem
@0x57	0xB2	put the data on buss
@0x58	0x00	load the mem to reg A
@0x59	0x00	addr of mem
@0x5A	0x54	H counter add 1
@0x5B	0x02	wirte the reg A to the mem
@0x5C	0x00	addr of mem
@0x5D	0x07	go to instruction
@0x5E	0x0C	back to range detection
		
@0x5F	0x00	load the mem to reg A
@0x60	0xA1	addr of mem
@0x61	0x01	load the mem to reg B
@0x62	0x09	addr of mem
@0x63	0xD6	test if the H counter in range then jump to 
@0x64	0x6D	
@0x65	0x07	then H is in range 3 or 1, go to
@0x66	0x67	
@0x67	0x00	load the mem to reg A
@0x68	0x04	addr of mem
@0x69	0x02	wirte the reg A to the mem
@0x6A	0x06	addr of mem
@0x6B	0x07	go to instruction
@0x6C	0x73	
@0x6D	0x00	load the mem to reg A
@0x6E	0x0E	addr of mem
@0x6F	0x02	wirte the reg A to the mem
@0x70	0x06	addr of mem
@0x71	0x07	go to instruction
@0x72	0x73	
		
@0x73	0x00	load the mem to reg A
@0x74	0xA2	addr of mem
@0x75	0x01	load the mem to reg B
@0x76	0x0C	addr of mem
@0x77	0xC6	test if the V counter in range then jump to 
@0x78	0x81	
@0x79	0x07	then H is in range 3 or 1, go to
@0x7A	0x7B	
@0x7B	0x00	load the mem to reg A
@0x7C	0x04	addr of mem
@0x7D	0x02	wirte the reg A to the mem
@0x7E	0x07	addr of mem
@0x7F	0x07	go to instruction
@0x80	0x87	
@0x81	0x00	load the mem to reg A
@0x82	0x0E	addr of mem
@0x83	0x02	wirte the reg A to the mem
@0x84	0x07	addr of mem
@0x85	0x07	go to instruction
@0x86	0x87	
@0x87	0x00	load the mem to reg A
@0x88	0x06	addr of mem
@0x89	0x01	load the mem to reg B
@0x8A	0x07	addr of mem
@0x8B	0xE4	pixel logic save output in A
@0x8C	0x02	wirte the reg A to the mem
@0x8D	0x05	addr of mem
@0x8E	0x00	load the mem to reg A
@0x8F	0xA1	addr of mem
@0x90	0x02	wirte the reg A to the mem
@0x91	0xB0	put the data on buss
@0x92	0x00	load the mem to reg A
@0x93	0xA2	addr of mem
@0x94	0x02	wirte the reg A to the mem
@0x95	0xB1	put the data on buss
@0x96	0x00	load the mem to reg A
@0x97	0x05	addr of mem
@0x98	0x02	wirte the reg A to the mem
@0x99	0xB2	put the data on buss





//mouse & IR transmitter
//checking X position
@0x9A	0x00	//Read mouse X to A
@0x9B	0xA1	//Address of mouse X
@0x9C	0x01	//Read H 53 to B
@0x9D	0x09	//address of H 53
@0x9E	0xB6	//If mouse X less than 53
@0x9F	0xAA	//Go to set H to 0

@0xA0	0x01	//Else read H 106 to B
@0xA1	0x0A	//Address of H 106
@0xA2	0xB6	//If mouse X less than 106
@0xA3	0xB0	//Go to set H to 1

@0xA4	0x00	//Else read 2 to A
@0xA5	0x1D	//Address of 2
@0xA6	0x02	//Write 2 to H
@0xA7	0x19	//H=2
@0xA8	0x07	//Go to addr
@0xA9	0xB4	//Address of check V

@0xAA	0x00	//Read 0 to A
@0xAB	0x1B	//Address of 0
@0xAC	0x02	//Write 0 to H
@0xAD	0x19	//H=0
@0xAE	0x07	//Go to addr
@0xAF	0xB4	//Address of check V


@0xB0	0x00	//Read 1 to A
@0xB1	0x1C	//Address of 1
@0xB2	0x02	//Write 1 to H
@0xB3	0x19	//H=1

//checking Y position
@0xB4	0x00	//Read mouse Y to A
@0xB5	0xA2	//Address of mouse Y
@0xB6	0x01	//Read V 40 to B
@0xB7	0x0C	//Address of V40
@0xB8	0xB6	//If mouse Y less than 40
@0xB9	0xC4	//Go to set V to 16

@0xBA	0x01	//Else read V 80 to B
@0xBB	0x0D	//Address of V 80
@0xBC	0xB6	//If mouse Y less than 80
@0xBD	0xCA	//Go to set V to 19

@0xBE	0x00	//Else  read 22 
@0xBF	0x20	//Address of 22
@0xC0	0x02	//Write 22 to V
@0xC1	0x1A	//address of V, V=22
@0xC2	0x07	//Go to addr
@0xC3	0xCE	//Address of send command

@0xC4	0x00	//Read 16
@0xC5	0x1E	//Address of 16
@0xC6	0x02	//Write 16 to V
@0xC7	0x1A	//Address of V, V=16
@0xC8	0x07	//Go to addr
@0xC9	0xCE	//Address of send command

@0xCA	0x00	//Read 19
@0xCB	0x1F	//Address of 19
@0xCC	0x02	//Write 19 to V
@0xCD	0x1A	//Address of V, V=19

//read mouse status
@0xCE	0x00	//read mouse status to A
@0xCF	0xA0	//address of mouse status
@0xD0	0x01	//read 9 to B, means left clicked on mouse
@0xD1	0x0F	//address of 9
@0xD2	0x96	//if mouse status==9
@0xD3	0xD8	//read command

@0xD4	0x00	//else read 0 to A
@0xD5	0x1B	//address of 0
@0xD6	0x07	//go to address of write command
@0xD7	0xDE	//address of write command

@0xD8	0x00	//Read H to A
@0xD9	0x19	//Address of H
@0xDA	0x01	//Read V to B
@0xDB	0x1A	//Address of V
@0xDC	0x04	//A=H+V
@0xDD	0x0B	//Dereference A

	
@0xDE	0x02	//Write A to IR
@0xDF	0x90	//address of IR

@0xE0	0x08	//go to idel


@0xFF	0x00	//return the main, re-draw the background